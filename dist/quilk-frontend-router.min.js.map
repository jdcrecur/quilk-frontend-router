{"version":3,"sources":["quilk-frontend-router.js"],"names":["QuilkFrontendRouter","routesObject","path","this","trimEnd","String","window","location","pathname","let","key","Array","isArray","this$1","run_path_matchers","subkey","$","alert","run_attribute_matchers","prototype","attributesObject","forEach","values","attr","constructors","value","run_attribute_constructors","valueArr","split","selector","join","length","attrVal","selector$2","slice","constructorsArr","construct","i","start_instance","path_match","init","e","console","error","substring","compare","indexOf","match","key_to_paths","k_path","key_parts","ret","seg","push","paths","pop","str","str2Trim"],"mappings":"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","file":"quilk-frontend-router.min.js","sourcesContent":["class QuilkFrontendRouter {\r\n\r\n  /**\r\n   * Loops over a routesObject provided calling any classes that match the current browser url\r\n   */\r\n  constructor (routesObject) {\r\n    let path = this.trimEnd(String(window.location.pathname), '/')\r\n    for (let key in routesObject) {\r\n\r\n      if (Array.isArray(routesObject[key])) {\r\n        this.run_path_matchers(routesObject, path, key)\r\n      } else {\r\n        if (key === 'path') {\r\n          for (let subkey in routesObject[key]) {\r\n            this.run_path_matchers(routesObject[key], path, subkey)\r\n          }\r\n        } else {\r\n          // check we have jquery else alert an error\r\n          if (typeof window.$ === 'undefined') {\r\n            alert('To use attribute selection with the QuilkFrontendRouter please ensure you load in jquery to the window object.')\r\n          } else {\r\n            this.run_attribute_matchers(routesObject[key])\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialises classes based on the attributes given\r\n   *\r\n   * @param attributesObject\r\n   */\r\n  run_attribute_matchers (attributesObject) {\r\n    let $ = window.$\r\n    attributesObject.forEach((values, attr) => {\r\n      values.forEach((constructors, value) => {\r\n        if (value === '*') {\r\n          this.run_attribute_constructors(constructors)\r\n        } else {\r\n          let valueArr = value.split(' ')\r\n\r\n          // run against classes\r\n          switch (attr) {\r\n            case 'class' : {\r\n              let selector = valueArr.join(', .')\r\n              if ($(selector).length > 0) this.run_attribute_constructors(constructors)\r\n            }\r\n              break\r\n            case 'id' : {\r\n              let selector = valueArr.join(', #')\r\n              if ($(selector).length > 0) this.run_attribute_constructors(constructors)\r\n            }\r\n              break;\r\n            default : {\r\n              let selector = ''\r\n              valueArr.forEach((attrVal)=>{\r\n                selector += '*['+attr+'='+attrVal+'], '\r\n              })\r\n              selector = selector.slice(0, -2);\r\n\r\n              if ($(selector).length > 0) {\r\n                this.run_attribute_constructors(constructors)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Pass an numeric array of class to initialize\r\n   *\r\n   * @param constructorsArr\r\n   */\r\n  run_attribute_constructors (constructorsArr) {\r\n    constructorsArr.forEach((construct, i) => {\r\n      this.start_instance(construct)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Runs checks against the key and the path\r\n   *\r\n   * @param routesObject\r\n   * @param path\r\n   * @param key\r\n   */\r\n  run_path_matchers (routesObject, path, key) {\r\n    if (this.path_match(path, key)) {\r\n      for (let i = 0; i < routesObject[key].length; ++i) {\r\n        this.start_instance(routesObject[key][i])\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calls new on a class\r\n   *\r\n   * @param init\r\n   */\r\n  start_instance (init) {\r\n    try {\r\n      new init\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns true if the provided path matches the key\r\n   *\r\n   * @param path\r\n   * @param key\r\n   * @returns {boolean}\r\n   */\r\n  path_match (path, key) {\r\n\r\n    //handle trailing wildcards\r\n    if (key.slice(-1) === '*') {\r\n\r\n      key = key.substring(0, key.length - 1)\r\n\r\n      if (key === '/' && path !== '/' && path.split('/').length === 2) return true\r\n\r\n      if (this.compare(path, key)) return true\r\n      else return ( path.indexOf(key) === 0 )\r\n    }\r\n\r\n    //handle std route\r\n    if (key.indexOf('(') === -1) return this.compare(path, key)\r\n\r\n    //handle key with params eg ()\r\n    let match = false\r\n    this.key_to_paths(key).forEach((k_path) => {\r\n      if (this.compare(path, k_path)) match = true\r\n    })\r\n\r\n    return match\r\n  }\r\n\r\n  /**\r\n   * Takes a key from the constants and returns a numeric array of all possible paths\r\n   *\r\n   * @param key\r\n   * @returns {[*]}\r\n   */\r\n  key_to_paths (key) {\r\n    let key_parts = key.split('(')\r\n    let ret = [this.trimEnd(key_parts[0], '/')]\r\n    //walk over each provided segment in the () | separated params, ensuring the last ) char is stripped\r\n    key_parts[1].slice(0, -1).split('|').forEach((seg) => {\r\n      ret.push(this.trimEnd(key_parts[0] + seg, '/'))\r\n    })\r\n    return ret\r\n  }\r\n\r\n  /**\r\n   * Compares a given key and path. If the kay contains a : separated param this is removed first from the key and path before comparison.\r\n   *\r\n   * @param path\r\n   * @param key\r\n   */\r\n  compare (path, key) {\r\n\r\n    key = this.trimEnd(key, '/')\r\n    if (key.indexOf(':') === -1) return (path === key)\r\n\r\n    //we have found a key with a param, strip param from path and key, then re-compared\r\n    key = this.trimEnd(key.split(':')[0], '/')\r\n\r\n    //strip the trialing url segment\r\n    let paths = path.split('/')\r\n    paths.pop()\r\n\r\n    path = this.trimEnd(paths.join('/'), '/')\r\n\r\n    return (path === key)\r\n  }\r\n\r\n  /**\r\n   * Trims the end of the string if matched to the str2trim. Clone of the lodash trimEnd function\r\n   *\r\n   * @param str\r\n   * @param str2Trim\r\n   * @returns {string}\r\n   */\r\n  trimEnd (str, str2Trim) {\r\n    if (str.substring(str.length - str2Trim.length, str.length) === str2Trim)\r\n      return str.substring(0, str.length - str2Trim.length)\r\n    return str\r\n  }\r\n}\r\n\r\nexport default QuilkFrontendRouter"]}