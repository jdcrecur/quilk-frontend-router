{"version":3,"sources":["quilk-frontend-router.js"],"names":["QuilkFrontendRouter","routesObject","path","this","trimEnd","String","window","location","pathname","let","key","path_match","i","length","this$1","start_instance","prototype","init","e","console","error","slice","substring","split","compare","indexOf","match","key_to_paths","forEach","k_path","key_parts","ret","seg","push","paths","pop","join","str","str2Trim"],"mappings":"kLAAA,GAAMA,GAAoB,SAKTC,cALXC,EAAAC,KAAmBC,QAACC,OAAAC,OAAAC,SAKTC,UAAY,IAEzB,KAASC,GAAIC,KAAOT,GAChB,GAAQE,EAAKQ,WAAYT,EAAMQ,GAFvB,IAAQD,GAAAG,GAAS,EAAAA,EAAQX,EAAOS,GAASG,SAAYD,EACjDE,EAAIC,eAAcd,EAAAS,GAAAE,WActCZ,GAAAgB,UAAID,eAAc,SAAGE,GACjB,IACI,GAAQA,GAFhB,MAAAC,GACYC,QAAAC,MAAAF,KAcZlB,EAAAgB,UAAIL,WAAU,SAAGT,EAAMQ,aAAvB,IAAI,MAAJA,EAAAW,OAAA,GAOQ,MAAgB,OAFhBX,EAAUA,EAAIY,UAAU,EAAGZ,EAAIG,OAAS,KAER,MAATX,GAA2C,IAA3BA,EAAKqB,MAAM,KAAKV,WAE/CV,KAAKqB,QAAQtB,EAAMQ,IAJgB,IAA7BR,EAAauB,QAAIf,GASnC,KALmC,IAA/BA,EAAQe,QAAY,KAAc,MAAAtB,MAAOqB,QAAKtB,EAAAQ,EAQlD,IAAQgB,IAAQ,CAAhB,OACAvB,MAASwB,aAAcjB,GAAMkB,QAAS,SAAEC,GAJ7B1B,EAASqB,QAAKtB,EAAS2B,KAAOH,GAAK,KAGjCA,GAcjB1B,EAAAgB,UAAIW,aAAY,SAAGjB,cACPoB,EAAYpB,EAAIa,MAAO,KACvBQ,GAAQ5B,KAAKC,QAAS0B,EAAW,GAAK,KAK9C,OAHAA,GAAe,GAAIT,MAAO,GAAI,GAAIE,MAAO,KAAMK,QAAS,SAAEI,GAJ9DD,EAAAE,KAAA9B,EAAAC,QAAI0B,EAAY,GAAAE,EAAA,QAODD,GASf/B,EAAAgB,UAAIQ,QAAO,SAAGtB,EAAMQ,GAGhB,GADAA,EAAUP,KAAKC,QAASM,EAAK,MACC,IAAtBA,EAAIe,QAAQ,KAAc,MAAQvB,KAASQ,CAGnDA,GAAUP,KAAKC,QAAQM,EAAIa,MAAM,KAAK,GAAI,IAJ1C,IAAUW,GAAKhC,EAASqB,MAAK,IAY7B,OAXAW,GAAYC,OASZjC,EAAWC,KAAKC,QAAQ8B,EAAME,KAAK,KAAM,QAEpB1B,GAUzBV,EAAAgB,UAAIZ,QAAO,SAAGiC,EAAKC,GACf,MAAQD,GAAIf,UAAWe,EAAIxB,OAASyB,EAASzB,OAAQwB,EAAIxB,UAAayB,EACvDD,EAAIf,UAAW,EAAGe,EAAIxB,OAASyB,EAASzB,QAC5CwB","file":"quilk-frontend-router.min.js","sourcesContent":["class QuilkFrontendRouter {\r\n\r\n    /**\r\n     * Loops over a routesObject provided calling any classes that match the current browser url\r\n     */\r\n    constructor( routesObject ) {\r\n        let path = this.trimEnd( String( window.location.pathname ), '/' );\r\n        for( let key in routesObject ){\r\n            if( this.path_match( path, key ) ) {\r\n                for( let i = 0 ; i < routesObject[key].length ; ++i ){\r\n                    this.start_instance( routesObject[key][i] );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calls new on a class\r\n     *\r\n     * @param init\r\n     */\r\n    start_instance ( init ) {\r\n        try {\r\n            new init;\r\n        } catch (e) {\r\n            console.error( e );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if the provided path matches the key\r\n     *\r\n     * @param path\r\n     * @param key\r\n     * @returns {boolean}\r\n     */\r\n    path_match ( path, key ) {\r\n\r\n        //handle trailing wildcards\r\n        if( key.slice(-1) === '*' ) {\r\n\r\n            key = key.substring(0, key.length - 1);\r\n\r\n            if( key === '/' && path !== '/' && path.split('/').length === 2) return true;\r\n\r\n            if( this.compare(path, key) ) return true;\r\n            else return ( path.indexOf( key ) === 0 );\r\n        }\r\n\r\n        //handle std route\r\n        if(key.indexOf( '(' ) === -1) return this.compare(path, key);\r\n\r\n        //handle key with params eg ()\r\n        let match = false;\r\n        this.key_to_paths( key ).forEach( ( k_path ) => {\r\n            if( this.compare(path, k_path) ) match = true;\r\n        } );\r\n\r\n        return match;\r\n    }\r\n\r\n    /**\r\n     * Takes a key from the constants and returns a numeric array of all possible paths\r\n     *\r\n     * @param key\r\n     * @returns {[*]}\r\n     */\r\n    key_to_paths ( key ) {\r\n        let key_parts = key.split( '(' );\r\n        let ret = [ this.trimEnd( key_parts[ 0 ], '/' ) ];\r\n        //walk over each provided segment in the () | separated params, ensuring the last ) char is stripped\r\n        key_parts[ 1 ].slice( 0, -1 ).split( '|' ).forEach( ( seg ) => {\r\n            ret.push( this.trimEnd( key_parts[ 0 ] + seg, '/' ) );\r\n        } );\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Compares a given key and path. If the kay contains a : separated param this is removed first from the key and path before comparison.\r\n     *\r\n     * @param path\r\n     * @param key\r\n     */\r\n    compare ( path, key ){\r\n\r\n        key = this.trimEnd( key, '/' );\r\n        if( key.indexOf(':') === -1 ) return (path === key);\r\n\r\n        //we have found a key with a param, strip param from path and key, then re-compared\r\n        key = this.trimEnd(key.split(':')[0], '/');\r\n\r\n        //strip the trialing url segment\r\n        let paths = path.split('/');\r\n        paths.pop();\r\n\r\n        path = this.trimEnd(paths.join('/'), '/');\r\n\r\n        return (path === key);\r\n    }\r\n\r\n    /**\r\n     * Trims the end of the string if matched to the str2trim. Clone of the lodash trimEnd function\r\n     *\r\n     * @param str\r\n     * @param str2Trim\r\n     * @returns {string}\r\n     */\r\n    trimEnd ( str, str2Trim ) {\r\n        if( str.substring( str.length - str2Trim.length, str.length ) === str2Trim )\r\n            return str.substring( 0, str.length - str2Trim.length );\r\n        return str;\r\n    }\r\n}\r\n\r\nexport default QuilkFrontendRouter;"]}