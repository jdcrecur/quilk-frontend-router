{"version":3,"file":"quilk-frontend-router.js","sources":["quilk-frontend-router.js"],"sourcesContent":["class QuilkFrontendRouter {\r\n\r\n    /**\r\n     * Loops over a routesObject provided calling any classes that match the current browser url\r\n     */\r\n    constructor( routesObject ) {\r\n        let path = this.trimEnd( String( window.location.pathname ), '/' );\r\n        for( let key in routesObject ){\r\n            if( this.path_match( path, key ) ) {\r\n                for( let i = 0 ; i < routesObject[key].length ; ++i ){\r\n                    this.start_instance( routesObject[key][i] );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calls new on a class\r\n     *\r\n     * @param init\r\n     */\r\n    start_instance ( init ) {\r\n        try {\r\n            new init;\r\n        } catch (e) {\r\n            console.error( e );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if the provided path matches the key\r\n     *\r\n     * @param path\r\n     * @param key\r\n     * @returns {boolean}\r\n     */\r\n    path_match ( path, key ) {\r\n\r\n        //handle trailing wildcards\r\n        if( key.slice(-1) === '*' ) {\r\n\r\n            key = key.substring(0, key.length - 1);\r\n\r\n            if( key === '/' && path !== '/' && path.split('/').length === 2) return true;\r\n\r\n            if( this.compare(path, key) ) return true;\r\n            else return ( path.indexOf( key ) === 0 );\r\n        }\r\n\r\n        //handle std route\r\n        if(key.indexOf( '(' ) === -1) return this.compare(path, key);\r\n\r\n        //handle key with params eg ()\r\n        let match = false;\r\n        this.key_to_paths( key ).forEach( ( k_path ) => {\r\n            if( this.compare(path, k_path) ) match = true;\r\n        } );\r\n\r\n        return match;\r\n    }\r\n\r\n    /**\r\n     * Takes a key from the constants and returns a numeric array of all possible paths\r\n     *\r\n     * @param key\r\n     * @returns {[*]}\r\n     */\r\n    key_to_paths ( key ) {\r\n        let key_parts = key.split( '(' );\r\n        let ret = [ this.trimEnd( key_parts[ 0 ], '/' ) ];\r\n        //walk over each provided segment in the () | separated params, ensuring the last ) char is stripped\r\n        key_parts[ 1 ].slice( 0, -1 ).split( '|' ).forEach( ( seg ) => {\r\n            ret.push( this.trimEnd( key_parts[ 0 ] + seg, '/' ) );\r\n        } );\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Compares a given key and path. If the kay contains a : separated param this is removed first from the key and path before comparison.\r\n     *\r\n     * @param path\r\n     * @param key\r\n     */\r\n    compare ( path, key ){\r\n\r\n        key = this.trimEnd( key, '/' );\r\n        if( key.indexOf(':') === -1 ) return (path === key);\r\n\r\n        //we have found a key with a param, strip param from path and key, then re-compared\r\n        key = this.trimEnd(key.split(':')[0], '/');\r\n\r\n        //strip the trialing url segment\r\n        let paths = path.split('/');\r\n        paths.pop();\r\n\r\n        path = this.trimEnd(paths.join('/'), '/');\r\n\r\n        return (path === key);\r\n    }\r\n\r\n    /**\r\n     * Trims the end of the string if matched to the str2trim. Clone of the lodash trimEnd function\r\n     *\r\n     * @param str\r\n     * @param str2Trim\r\n     * @returns {string}\r\n     */\r\n    trimEnd ( str, str2Trim ) {\r\n        if( str.substring( str.length - str2Trim.length, str.length ) === str2Trim )\r\n            return str.substring( 0, str.length - str2Trim.length );\r\n        return str;\r\n    }\r\n}\r\n\r\nexport default QuilkFrontendRouter;"],"names":["let","this"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}