{"version":3,"file":"index.js","sources":["quilk-frontend-router.js"],"sourcesContent":["export default class QuilkFrontendRouter {\r\n\r\n  /**\r\n   * Loops over a routesObject provided calling any classes that match the current browser url\r\n   */\r\n  constructor (routesObject, verbose = false) {\r\n\r\n    this.verbose_mode = verbose\r\n\r\n    let path = this.trimEnd(String(window.location.pathname), '/')\r\n    for (let key in routesObject) {\r\n\r\n      if (Array.isArray(routesObject[key])) {\r\n        this.log('Simple numeric array path matching')\r\n        this.run_path_matchers(routesObject, path, key)\r\n      } else {\r\n        if (key === 'path') {\r\n          this.log('Key hit \"path\", passing \"path\" object to the routing matcher')\r\n          for (let subkey in routesObject[key]) {\r\n            this.run_path_matchers(routesObject[key], path, subkey)\r\n          }\r\n        } else if( key === 'attributes' ) {\r\n          // check we have jquery else alert an error\r\n          if (typeof window.$ === 'undefined') {\r\n            alert('To use attribute selection with the QuilkFrontendRouter please ensure you load in jquery to the window object.')\r\n          } else {\r\n            this.log('Key hit \"attributes\", passing \"attributes\" object to the routing matcher')\r\n            this.run_attribute_matchers(routesObject[key])\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  log (msg) {\r\n    if (this.verbose_mode === true) {\r\n      console.log('QuilkFrontendRouter message: ', msg)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialises classes based on the attributes given\r\n   *\r\n   * @param attributesObject\r\n   */\r\n  run_attribute_matchers (attributesObject) {\r\n    let $ = window.$\r\n\r\n    for (let key in attributesObject) {\r\n      let values = attributesObject[key]\r\n      let attr = key\r\n\r\n      for (let value in values) {\r\n        let constructors = values[value]\r\n\r\n        if (value === '*') {\r\n          if( $('*['+attr+']').length > 0 ){\r\n            this.log('Wildcard hit for attr \"'+attr+'\"')\r\n            this.run_attribute_constructors(constructors)\r\n          }\r\n        } else {\r\n          let valueArr = value.split(' ')\r\n\r\n          // run against classes\r\n          let selector = ''\r\n          switch (attr) {\r\n            case 'class' : {\r\n              for (let i = 0; i < valueArr.length; ++i) {\r\n                selector += '.' + valueArr[i] + ', '\r\n              }\r\n            }\r\n              break\r\n            case 'id' : {\r\n              for (let i = 0; i < valueArr.length; ++i) {\r\n                selector += '#' + valueArr[i] + ', '\r\n              }\r\n            }\r\n              break\r\n            default : {\r\n              for (let i = 0; i < valueArr.length; ++i) {\r\n                selector += '*[' + attr + '=' + valueArr[i] + '], '\r\n              }\r\n            }\r\n          }\r\n          selector = selector.slice(0, -2)\r\n          if ($(selector).length > 0) {\r\n            this.log('Attr + val hit: '+selector)\r\n            this.run_attribute_constructors(constructors)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pass an numeric array of class to initialize\r\n   *\r\n   * @param constructorsArr\r\n   */\r\n  run_attribute_constructors (constructorsArr) {\r\n    for (let i = 0; i < constructorsArr.length; ++i) {\r\n      this.start_instance(constructorsArr[i])\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Runs checks against the key and the path\r\n   *\r\n   * @param routesObject\r\n   * @param path\r\n   * @param key\r\n   */\r\n  run_path_matchers (routesObject, path, key) {\r\n    if (this.path_match(path, key)) {\r\n      for (let i = 0; i < routesObject[key].length; ++i) {\r\n        this.start_instance(routesObject[key][i])\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calls new on a class\r\n   *\r\n   * @param init\r\n   */\r\n  start_instance (init) {\r\n    try {\r\n      new init\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns true if the provided path matches the key\r\n   *\r\n   * @param path\r\n   * @param key\r\n   * @returns {boolean}\r\n   */\r\n  path_match (path, key) {\r\n\r\n    //handle trailing wildcards\r\n    if (key.slice(-1) === '*') {\r\n\r\n      key = key.substring(0, key.length - 1)\r\n\r\n      if (key === '/' && path !== '/' && path.split('/').length === 2) return true\r\n\r\n      if (this.compare(path, key)) return true\r\n      else return ( path.indexOf(key) === 0 )\r\n    }\r\n\r\n    //handle std route\r\n    if (key.indexOf('(') === -1) return this.compare(path, key)\r\n\r\n    //handle key with params eg ()\r\n    let match = false\r\n    this.key_to_paths(key).forEach((k_path) => {\r\n      if (this.compare(path, k_path)) match = true\r\n    })\r\n\r\n    return match\r\n  }\r\n\r\n  /**\r\n   * Takes a key from the constants and returns a numeric array of all possible paths\r\n   *\r\n   * @param key\r\n   * @returns {[*]}\r\n   */\r\n  key_to_paths (key) {\r\n    let key_parts = key.split('(')\r\n    let ret = [this.trimEnd(key_parts[0], '/')]\r\n    //walk over each provided segment in the () | separated params, ensuring the last ) char is stripped\r\n    key_parts[1].slice(0, -1).split('|').forEach((seg) => {\r\n      ret.push(this.trimEnd(key_parts[0] + seg, '/'))\r\n    })\r\n    return ret\r\n  }\r\n\r\n  /**\r\n   * Compares a given key and path. If the kay contains a : separated param this is removed first from the key and path before comparison.\r\n   *\r\n   * @param path\r\n   * @param key\r\n   */\r\n  compare (path, key) {\r\n\r\n    key = this.trimEnd(key, '/')\r\n    if (key.indexOf(':') === -1) return (path === key)\r\n\r\n    //we have found a key with a param, strip param from path and key, then re-compared\r\n    key = this.trimEnd(key.split(':')[0], '/')\r\n\r\n    //strip the trialing url segment\r\n    let paths = path.split('/')\r\n    paths.pop()\r\n\r\n    path = this.trimEnd(paths.join('/'), '/')\r\n\r\n    return (path === key)\r\n  }\r\n\r\n  /**\r\n   * Trims the end of the string if matched to the str2trim. Clone of the lodash trimEnd function\r\n   *\r\n   * @param str\r\n   * @param str2Trim\r\n   * @returns {string}\r\n   */\r\n  trimEnd (str, str2Trim) {\r\n    if (str.substring(str.length - str2Trim.length, str.length) === str2Trim)\r\n      return str.substring(0, str.length - str2Trim.length)\r\n    return str\r\n  }\r\n}"],"names":["let","i","this"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}